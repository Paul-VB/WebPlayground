// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using WebPlayground.Data.PostgreSQL;

#nullable disable

namespace WebPlayground.Data.PostgreSQL.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebPlayground.Data.Models.Ai.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Documents", "ai");
                });

            modelBuilder.Entity("WebPlayground.Data.Models.Ai.DocumentChunk", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("DocumentFk")
                        .HasColumnType("bigint");

                    b.Property<Vector>("Embedding")
                        .IsRequired()
                        .HasColumnType("vector(1536)");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentFk");

                    b.ToTable("DocumentChunks", "ai");
                });

            modelBuilder.Entity("WebPlayground.Data.Models.Ai.DocumentChunk", b =>
                {
                    b.HasOne("WebPlayground.Data.Models.Ai.Document", "Document")
                        .WithMany("Chunks")
                        .HasForeignKey("DocumentFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("WebPlayground.Data.Models.Ai.Document", b =>
                {
                    b.Navigation("Chunks");
                });
#pragma warning restore 612, 618
        }
    }
}
